{"version":3,"sources":["components/PokemonTypeBadge.tsx","components/PokemonListItem.tsx","components/PokemonList.tsx","models/pokemon.ts","models/pokemon_type.ts","services/pokedex_api_service.ts","services/pokemon_data_service.ts","components/SearchBox.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PokemonTypeBadge","type","className","name","badgeColor","join","PokemonListItem","pokemon","src","spriteURL","alt","displayName","types","map","key","PokemonList","p","Pokemon","url","id","this","ensureID","JSON","stringify","match","exec","Number","json","parsed","parse","PokemonType","parsedJson","PokedexAPIService","limit","URI","fetch","response","results","i","fromAPITypeDetail","PokemonDataService","_pokemon","isCached","loadFromAPI","loadTypes","populateCache","loadFromCache","getPokemon","api","then","queue","updateTypes","Promise","all","getTypes","forEach","updateCache","undefined","localStorage","setItem","toString","toJson","output","MAX_POKEMON_ID","getItem","push","fromJson","SearchBox","onChange","placeholder","App","useState","dataLoaded","setDataLoaded","searchQuery","setSearchQuery","setPokemon","filteredPokemon","setFilteredPokemon","dataService","useEffect","load","filter","includes","filterPokemon","Fragment","length","event","target","value","max","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f02dac64.chunk.js","sourcesContent":["import React from 'react';\nimport PokemonType from '../models/pokemon_type';\n\nconst PokemonTypeBadge: React.FC<{ type: PokemonType }> = ({ type }) => {\n  const badgeColor = (name: string) => {\n    switch(name) {\n      case 'fire':\n        return 'is-danger';\n      case 'water':\n        return 'is-link';\n      case 'grass':\n        return 'is-success';\n      case 'poison':\n        return 'is-primary';\n      case 'normal':\n        return 'is-light';\n      case 'steel':\n          return 'is-light';\n      case 'electric':\n        return 'is-warning';\n      case 'ghost':\n        return 'is-white';\n      case 'flying':\n        return 'is-light';\n      default:\n        return 'is-light';\n    }\n  }\n\n  return (\n    <span className={['tag', 'is-light', badgeColor(type.name)].join(' ')}>{type.name}</span>\n  );\n}\n\nexport default PokemonTypeBadge;","import React from 'react';\nimport Pokemon from '../models/pokemon';\nimport PokemonType from '../models/pokemon_type';\nimport PokemonTypeBadge from './PokemonTypeBadge';\n\nconst PokemonListItem: React.FC<{ pokemon: Pokemon }> = ({ pokemon }) => {\n  return (\n    <div className=\"box\">\n      <article className=\"columns is-vcentered\">\n        <div className=\"column\">\n          <div className=\"content\">\n            <figure className=\"poke-image\">\n              <p className=\"image is-64x64\">\n                <img src={pokemon.spriteURL} alt=\"\"/>\n              </p>\n            </figure>\n          </div>\n        </div>\n        <div className=\"column\">\n          <div className=\"content\">\n            <p className=\"subtitle is-capitalized has-text-centered\">{pokemon.displayName}</p>\n          </div>\n        </div>\n        <div className=\"column\">\n          <div className=\"content\">\n            <div className=\"tags are-large\">\n              { pokemon.types?.map((type: PokemonType) => <PokemonTypeBadge key={type.key} type={type} />) }\n            </div>\n          </div>\n        </div>\n      </article>\n    </div>\n  );\n}\n\nexport default PokemonListItem;","import React from 'react';\nimport Pokemon from '../models/pokemon';\nimport PokemonListItem from './PokemonListItem';\n\nconst PokemonList: React.FC<{ pokemon: Pokemon[] | null }> = ({ pokemon }) => {\n  return (\n    <div className=\"\">\n      { pokemon?.map((p) => <PokemonListItem pokemon={p} key={p.key} />) }\n    </div>\n  );\n}\n\nexport default PokemonList;","import PokemonType from './pokemon_type';\n\nexport default class Pokemon {\n  name: string;\n  url: string;\n  id?: number;\n  types?: PokemonType[];\n\n  constructor(name: string, url: string, id?: number, types?: PokemonType[]) {\n    this.name = name;\n    this.url = url;\n    this.id = id;\n    this.types = types;\n    this.ensureID();\n  }\n\n  toJson(): string {\n    return JSON.stringify(this);\n  }\n\n  static fromJson(json: string): Pokemon {\n    const parsed = JSON.parse(json);\n\n    return new Pokemon(parsed.name, parsed.url, parsed.id, parsed.types);\n  }\n\n  get displayName(): string {\n    return this.name;\n  }\n\n  get key(): number | string {\n    return this.id || this.name;\n  }\n\n  get spriteURL(): string {\n    return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${this.id}.png`;\n  }\n\n  private ensureID() {\n    if(this.id) {\n      return;\n    }\n\n    const idRegex = /(?<=\\/)(\\d{1,3})/;\n    const match = idRegex.exec(this.url);\n\n    if(match !== null) {\n      this.id = Number(match[0]);\n    }\n  }\n}\n","import APITypeDetail from '../interfaces/api_type_detail';\n\nexport default class PokemonType {\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  get key(): string {\n    return this.name;\n  }\n\n  static fromAPITypeDetail(parsedJson: APITypeDetail): PokemonType {\n    return new PokemonType(parsedJson.type.name);\n  }\n}\n","import APIListResponse from '../interfaces/api_list_response';\nimport APIListResponseItem from '../interfaces/api_list_response_item';\nimport Pokemon from '../models/pokemon';\nimport PokemonType from '../models/pokemon_type';\nimport APIDetailResponse from '../interfaces/api_detail_response';\nimport APITypeDetail from '../interfaces/api_type_detail';\n\nexport default class PokedexAPIService {\n  static readonly URI = 'https://pokeapi.co/api/v2/pokemon';\n\n  async getPokemon(limit = 151): Promise<Pokemon[]> {\n    const url = `${PokedexAPIService.URI}?limit=${limit}`;\n    const response = await fetch(url);\n    const parsed: APIListResponse = await response.json();\n    const pokemon = parsed.results.map((i: APIListResponseItem) => new Pokemon(i.name, i.url));\n\n    return pokemon;\n  }\n\n  async getTypes(pokemon: Pokemon): Promise<PokemonType[]> {\n    const url = `${PokedexAPIService.URI}/${pokemon.id}`;\n    const response = await fetch(url);\n    const parsed: APIDetailResponse = await response.json();\n    const types = parsed.types.map((i: APITypeDetail) =>  PokemonType.fromAPITypeDetail(i));\n\n    return types;\n  }\n}\n","import Pokemon from \"../models/pokemon\";\nimport PokedexAPIService from \"./pokedex_api_service\";\nimport PokemonType from \"../models/pokemon_type\";\n\nclass PokemonDataService {\n  static readonly MAX_POKEMON_ID = 152;\n\n  private _pokemon: Pokemon[] = [];\n\n  async load(): Promise<Pokemon[]> {\n    if(!this.isCached) {\n      this._pokemon = await this.loadFromAPI();\n      await this.loadTypes();\n      this.populateCache();\n    } else {\n      this.loadFromCache();\n    }\n\n    return this.getPokemon;\n  }\n\n  get getPokemon(): Pokemon[] {\n    return this._pokemon;\n  }\n\n  private async loadFromAPI(): Promise<Pokemon[]> {\n    const api = new PokedexAPIService();\n    \n    return api.getPokemon().then((pokemon: Pokemon[]) => pokemon);\n  }\n\n  private async loadTypes() {\n    const queue = this._pokemon.map((p: Pokemon) => this.updateTypes(p));\n\n    return Promise.all(queue);\n  }\n\n  async updateTypes(pokemon: Pokemon) {\n    if(pokemon.types) {\n      return;\n    }\n\n    const api = new PokedexAPIService();\n\n    return api.getTypes(pokemon).then((types: PokemonType[]) => { \n      pokemon.types = types;\n    })\n  }\n\n  private populateCache() {\n    this._pokemon.forEach((p: Pokemon) => {\n      this.updateCache(p);\n    })\n  }\n\n  updateCache(pokemon: Pokemon) {\n    if(pokemon.id !== undefined) {\n      localStorage.setItem(pokemon.id.toString(), pokemon.toJson());\n    }\n  }\n\n  async loadFromCache() {\n    let output = [];\n    for (let i = 1; i < PokemonDataService.MAX_POKEMON_ID; i++) {\n      const json = localStorage.getItem(i.toString());\n\n      if(json !== null) {\n        output.push(Pokemon.fromJson(json))\n      }\n    }\n\n    this._pokemon = output;\n  }\n\n  private get isCached(): boolean {\n    return localStorage.getItem('1') !== null;\n  }\n}\n\nexport default PokemonDataService;","import React from 'react';\n\ninterface SearchBoxProps {\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchBox: React.FC<SearchBoxProps> = ({ onChange }) => {\n  return (\n    <nav className=\"panel\">\n      <div className=\"panel-block\">\n        <p className=\"control\">\n          <input onChange={onChange} className=\"input\" type=\"text\" placeholder=\"Enter a name or ID\" />\n        </p>\n      </div>\n    </nav>\n  );\n}\n\nexport default SearchBox;","import React, { useEffect, useState } from 'react';\nimport './App.scss';\n\nimport Pokemon from './models/pokemon';\nimport PokemonList from './components/PokemonList';\nimport PokemonDataService from './services/pokemon_data_service';\nimport SearchBox from './components/SearchBox';\n\nfunction App() {\n  const [dataLoaded, setDataLoaded] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [pokemon, setPokemon] = useState<Pokemon[] | null>([]);\n  const [filteredPokemon, setFilteredPokemon] = useState<Pokemon[] | null>([]);\n  const dataService = new PokemonDataService();\n\n  const onSearch = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setSearchQuery(event.target.value);\n  }\n\n  const filterPokemon = () => {\n    if(searchQuery === '') {\n      setFilteredPokemon(pokemon);\n      return;\n    }\n\n    const output = pokemon?.filter((p: Pokemon) => p.name.includes(searchQuery) || p.id?.toString().includes(searchQuery)) || [];\n    setFilteredPokemon(output);\n  }\n\n  useEffect(() => {\n    dataService.load()\n      .then((pokemon: Pokemon[]) => {\n        setPokemon(pokemon);\n        setFilteredPokemon(pokemon);\n        setDataLoaded(true);\n      });\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    filterPokemon();\n  }, [searchQuery]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className=\"App\">\n      { \n        dataLoaded ? \n          <React.Fragment>\n            <p>Showing {filteredPokemon?.length || 0} result(s).</p>\n            <SearchBox onChange={onSearch} />\n            <PokemonList pokemon={filteredPokemon} />\n          </React.Fragment> :\n          <div className=\"container\">\n            <div className=\"content\">\n              <progress className=\"progress is-small is-primary\" max=\"100\"></progress> \n            </div>\n          </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}